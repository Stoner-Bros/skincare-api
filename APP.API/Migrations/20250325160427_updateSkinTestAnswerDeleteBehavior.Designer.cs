// <auto-generated />
using System;
using APP.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APP.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250325160427_updateSkinTestAnswerDeleteBehavior")]
    partial class updateSkinTestAnswerDeleteBehavior
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APP.Entity.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("account", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_Email_Length", "LEN([email]) >= 6");

                            t.HasCheckConstraint("CK_Email_Valid", "CHARINDEX('@', [email]) > 0");

                            t.HasCheckConstraint("CK_Role_Valid", "[role] IN ('Customer', 'Skin Therapist', 'Staff', 'Manager')");
                        });
                });

            modelBuilder.Entity("APP.Entity.Entities.AccountInfo", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("avatar");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("dob");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("OtherInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("other_info");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("phone");

                    b.HasKey("AccountId");

                    b.ToTable("account_info", "dbo", t =>
                        {
                            t.HasCheckConstraint("CK_Fullname_Length", "LEN([full_name]) >= 6");

                            t.HasCheckConstraint("CK_Phone_Valid", "LEN([phone]) = 10");
                        });
                });

            modelBuilder.Entity("APP.Entity.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("PublishAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("publish_at");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tags");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int")
                        .HasColumnName("view_count");

                    b.HasKey("BlogId");

                    b.HasIndex("AccountId");

                    b.ToTable("blog", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("booking_at");

                    b.Property<DateTime?>("CheckinAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("checkin_at");

                    b.Property<DateTime?>("CheckoutAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("checkout_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("GuestId")
                        .HasColumnType("int")
                        .HasColumnName("guest_id");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int>("SkinTherapistId")
                        .HasColumnType("int")
                        .HasColumnName("skin_therapist_id");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_price");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.HasKey("BookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GuestId");

                    b.HasIndex("SkinTherapistId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("booking", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.BookingTimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("int")
                        .HasColumnName("time_slot_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("booking_time_slot", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("comment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("CommentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BlogId");

                    b.ToTable("comment", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.ConsultingForm", b =>
                {
                    b.Property<int>("ConsultingFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consulting_form_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultingFormId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("GuestId")
                        .HasColumnType("int")
                        .HasColumnName("guest_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ConsultingFormId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GuestId");

                    b.HasIndex("StaffId");

                    b.ToTable("consulting_form", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Customer", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("LastVisit")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_visit");

                    b.HasKey("AccountId");

                    b.ToTable("customer", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.ExpiredToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("token");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("InvalidationTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("invalidation_time");

                    b.HasKey("Token");

                    b.HasIndex("AccountId");

                    b.ToTable("expired_token", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("feedback", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.FeedbackReply", b =>
                {
                    b.Property<int>("FeedbackReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_reply_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackReplyId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    b.Property<string>("Reply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("reply");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("staff_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("FeedbackReplyId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("StaffId");

                    b.ToTable("feedback_reply", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("guest_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuestId"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("phone");

                    b.HasKey("GuestId");

                    b.ToTable("guest", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("notification_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("NotificationId");

                    b.HasIndex("AccountId");

                    b.ToTable("notification", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("payment_status");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("payment", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("refresh_token_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnName("created");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiry");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2")
                        .HasColumnName("revoked");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("AccountId");

                    b.ToTable("refresh_token", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_description");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("service_name");

                    b.Property<string>("ServiceThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("service_thumbnail_url");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ServiceId");

                    b.ToTable("service", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CentreAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("centre_address");

                    b.Property<string>("CentreEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("centre_email");

                    b.Property<string>("CentreName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("centre_name");

                    b.Property<string>("CentrePhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("centre_phone_number");

                    b.Property<TimeSpan>("ClosingHours")
                        .HasColumnType("time")
                        .HasColumnName("closing_hours");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("OpeningDays")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("opening_days");

                    b.Property<TimeSpan>("OpeningHours")
                        .HasColumnType("time")
                        .HasColumnName("opening_hours");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("settings", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTest", b =>
                {
                    b.Property<int>("SkinTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skin_test_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkinTestId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("test_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("SkinTestId");

                    b.ToTable("skin_test", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTestAnswer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("answer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("answers");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("GuestId")
                        .HasColumnType("int")
                        .HasColumnName("guest_id");

                    b.Property<int>("SkinTestId")
                        .HasColumnType("int")
                        .HasColumnName("skin_test_id");

                    b.HasKey("AnswerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GuestId");

                    b.HasIndex("SkinTestId");

                    b.ToTable("skin_test_answer", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTestQuestion", b =>
                {
                    b.Property<int>("SkinTestQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("skin_test_question_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkinTestQuestionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("OptionA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("option_a");

                    b.Property<string>("OptionB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("option_b");

                    b.Property<string>("OptionC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("option_c");

                    b.Property<string>("OptionD")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("option_d");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("question_text");

                    b.Property<int>("SkinTestId")
                        .HasColumnType("int")
                        .HasColumnName("skin_test_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("SkinTestQuestionId");

                    b.HasIndex("SkinTestId");

                    b.ToTable("skin_test_question", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTestResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("GuestId")
                        .HasColumnType("int")
                        .HasColumnName("guest_id");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("result");

                    b.Property<int>("SkinTestId")
                        .HasColumnType("int")
                        .HasColumnName("skin_test_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("ResultId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GuestId");

                    b.HasIndex("SkinTestId");

                    b.ToTable("skin_test_result", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTherapist", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<string>("Experience")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("experience");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("introduction");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("rating");

                    b.Property<string>("Specialization")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("specialization");

                    b.HasKey("AccountId");

                    b.ToTable("skin_therapist", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTherapistSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<int>("SkinTherapistId")
                        .HasColumnType("int")
                        .HasColumnName("skin_therapist_id");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("work_date");

                    b.HasKey("ScheduleId");

                    b.HasIndex("SkinTherapistId");

                    b.ToTable("skin_therapist_schedule", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Staff", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("AccountId");

                    b.ToTable("staff", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.TimeSlot", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("time_slot_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeSlotId"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.HasKey("TimeSlotId");

                    b.ToTable("timeslot", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.Treatment", b =>
                {
                    b.Property<int>("TreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreatmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("is_available");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<string>("TreatmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("treatment_name");

                    b.Property<string>("TreatmentThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("treatment_thumbnail_url");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("TreatmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("treatment", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.TreatmentResult", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("completed_at");

                    b.Property<string>("Recommendations")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recommendations");

                    b.Property<string>("TreatmentNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("treatment_notes");

                    b.HasKey("ResultId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("treatment_result", "dbo");
                });

            modelBuilder.Entity("APP.Entity.Entities.AccountInfo", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithOne("AccountInfo")
                        .HasForeignKey("APP.Entity.Entities.AccountInfo", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APP.Entity.Entities.Blog", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithMany("Blogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APP.Entity.Entities.Booking", b =>
                {
                    b.HasOne("APP.Entity.Entities.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.Guest", "Guest")
                        .WithMany("Bookings")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.SkinTherapist", "SkinTherapist")
                        .WithMany("Bookings")
                        .HasForeignKey("SkinTherapistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.Staff", "Staff")
                        .WithMany("Bookings")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.Treatment", "Treatment")
                        .WithMany("Bookings")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Guest");

                    b.Navigation("SkinTherapist");

                    b.Navigation("Staff");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("APP.Entity.Entities.BookingTimeSlot", b =>
                {
                    b.HasOne("APP.Entity.Entities.Booking", "Booking")
                        .WithMany("BookingTimeSlots")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.TimeSlot", "TimeSlot")
                        .WithMany("BookingTimeSlots")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("APP.Entity.Entities.Comment", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("APP.Entity.Entities.ConsultingForm", b =>
                {
                    b.HasOne("APP.Entity.Entities.Customer", "Customer")
                        .WithMany("ConsultingForms")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APP.Entity.Entities.Guest", "Guest")
                        .WithMany("ConsultingForms")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("APP.Entity.Entities.Staff", "Staff")
                        .WithMany("ConsultingForms")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Guest");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("APP.Entity.Entities.Customer", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("APP.Entity.Entities.Customer", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APP.Entity.Entities.ExpiredToken", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithMany("ExpiredTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APP.Entity.Entities.Feedback", b =>
                {
                    b.HasOne("APP.Entity.Entities.Booking", "Booking")
                        .WithOne("Feedback")
                        .HasForeignKey("APP.Entity.Entities.Feedback", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("APP.Entity.Entities.FeedbackReply", b =>
                {
                    b.HasOne("APP.Entity.Entities.Feedback", "Feedback")
                        .WithMany("FeedbackReplies")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.Staff", "Staff")
                        .WithMany("FeedbackReplies")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Feedback");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("APP.Entity.Entities.Notification", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APP.Entity.Entities.Payment", b =>
                {
                    b.HasOne("APP.Entity.Entities.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("APP.Entity.Entities.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("APP.Entity.Entities.RefreshToken", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTestAnswer", b =>
                {
                    b.HasOne("APP.Entity.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("APP.Entity.Entities.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId");

                    b.HasOne("APP.Entity.Entities.SkinTest", "SkinTest")
                        .WithMany("SkinTestAnswer")
                        .HasForeignKey("SkinTestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Guest");

                    b.Navigation("SkinTest");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTestQuestion", b =>
                {
                    b.HasOne("APP.Entity.Entities.SkinTest", "SkinTest")
                        .WithMany("SkinTestQuestions")
                        .HasForeignKey("SkinTestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SkinTest");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTestResult", b =>
                {
                    b.HasOne("APP.Entity.Entities.Customer", "Customer")
                        .WithMany("SkinTestResults")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.Guest", "Guest")
                        .WithMany("SkinTestResults")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("APP.Entity.Entities.SkinTest", "SkinTest")
                        .WithMany("SkinTestResults")
                        .HasForeignKey("SkinTestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Guest");

                    b.Navigation("SkinTest");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTherapist", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithOne("SkinTherapist")
                        .HasForeignKey("APP.Entity.Entities.SkinTherapist", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTherapistSchedule", b =>
                {
                    b.HasOne("APP.Entity.Entities.SkinTherapist", "SkinTherapist")
                        .WithMany("SkinTherapistSchedules")
                        .HasForeignKey("SkinTherapistId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SkinTherapist");
                });

            modelBuilder.Entity("APP.Entity.Entities.Staff", b =>
                {
                    b.HasOne("APP.Entity.Entities.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("APP.Entity.Entities.Staff", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("APP.Entity.Entities.Treatment", b =>
                {
                    b.HasOne("APP.Entity.Entities.Service", "Service")
                        .WithMany("Treatments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("APP.Entity.Entities.TreatmentResult", b =>
                {
                    b.HasOne("APP.Entity.Entities.Booking", "Booking")
                        .WithOne("TreatmentResult")
                        .HasForeignKey("APP.Entity.Entities.TreatmentResult", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("APP.Entity.Entities.Account", b =>
                {
                    b.Navigation("AccountInfo")
                        .IsRequired();

                    b.Navigation("Blogs");

                    b.Navigation("Comments");

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("ExpiredTokens");

                    b.Navigation("Notifications");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SkinTherapist")
                        .IsRequired();

                    b.Navigation("Staff")
                        .IsRequired();
                });

            modelBuilder.Entity("APP.Entity.Entities.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("APP.Entity.Entities.Booking", b =>
                {
                    b.Navigation("BookingTimeSlots");

                    b.Navigation("Feedback")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("TreatmentResult")
                        .IsRequired();
                });

            modelBuilder.Entity("APP.Entity.Entities.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ConsultingForms");

                    b.Navigation("SkinTestResults");
                });

            modelBuilder.Entity("APP.Entity.Entities.Feedback", b =>
                {
                    b.Navigation("FeedbackReplies");
                });

            modelBuilder.Entity("APP.Entity.Entities.Guest", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ConsultingForms");

                    b.Navigation("SkinTestResults");
                });

            modelBuilder.Entity("APP.Entity.Entities.Service", b =>
                {
                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTest", b =>
                {
                    b.Navigation("SkinTestAnswer");

                    b.Navigation("SkinTestQuestions");

                    b.Navigation("SkinTestResults");
                });

            modelBuilder.Entity("APP.Entity.Entities.SkinTherapist", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("SkinTherapistSchedules");
                });

            modelBuilder.Entity("APP.Entity.Entities.Staff", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ConsultingForms");

                    b.Navigation("FeedbackReplies");
                });

            modelBuilder.Entity("APP.Entity.Entities.TimeSlot", b =>
                {
                    b.Navigation("BookingTimeSlots");
                });

            modelBuilder.Entity("APP.Entity.Entities.Treatment", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
